package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"strings"
	"text/template"

	"google.golang.org/protobuf/compiler/protogen"
)

type ProtoMessageDescOptions struct {
	Kind string
}

func main() {
	protogen.Options{}.Run(func(p *protogen.Plugin) error {
		for _, file := range p.Files {
			if !file.Generate {
				continue
			}

			generated := p.NewGeneratedFile(fmt.Sprintf("%s_crud.proto", file.GeneratedFilenamePrefix), file.GoImportPath)

			generated.P("// Code generated by protoc-gen-proto-crud. DO NOT EDIT.")
			originalFile, err := os.Open(file.Desc.Path())
			if err != nil {
				return err
			}

			contents, err := ioutil.ReadAll(originalFile)
			if err != nil {
				return err
			}

			_, err = generated.Write(NewProtoFilter()(contents))
			if err != nil {
				return err
			}

			generated.P("")
			generated.P("")

			generated.P(fmt.Sprintf("import \"%s\";", file.Desc.Path()))

			for _, msg := range file.Messages {
				opt := &ProtoMessageDescOptions{}
				opt.ParseComments(msg.Comments.Leading)

				// fmt.Println(*opt)
				// if opt.Kind == "model" {
				err = renderTemplate(generated, map[string]string{
					"name": string(msg.Desc.Name()),
				})
				if err != nil {
					return err
				}
				// }
			}
		}
		return nil
	})
}

func renderTemplate(generated *protogen.GeneratedFile, context map[string]string) error {
	t := template.New("service.proto.tmpl").Funcs(map[string]interface{}{
		"lower": strings.ToLower,
	})
	t = template.Must(t.ParseFiles("service.proto.tmpl"))

	err := t.Execute(generated, context)
	if err != nil {
		return err
	}
	return nil
}

func (opt *ProtoMessageDescOptions) ParseComments(comments protogen.Comments) {
	c := string(comments)
	if !strings.Contains(c, "proto-crud") {
		return
	}

	optsKv := strings.SplitN(c, ":", 2)[1]

	for _, kv := range strings.Split(optsKv, ",") {
		if strings.Contains(kv, "=") {
			key, value := strings.SplitN(kv, "=", 2)[0], strings.SplitN(kv, "=", 2)[1]
			if key == "kind" {
				opt.Kind = value
			}
		}
	}
}
